<#
Copyright 2014 ASOS.com Limited

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#>

function Get-Checksum {

	<#

	.SYNOPSIS
	Return the checksum of the specified file

	#>

	param (

		[Parameter(ParameterSetName="file")]
		[string]
		# Path to the file to get the checksum for
		$path,

		[Parameter(ParameterSetName="string")]
		[string]
		# The string to get the checksum for
		$string,

		[ValidateSet("sha1", "md5", "sha256")]
		[string]
		# Algorithm to use when generating the checksum
		$algorithm = "md5",

		[string]
		# The encoding method to use
		$encoding = "ASCII",

		[switch]
		# If trim is specified then the system will trim whitespace from the begining and end of input
		$trim,

		[switch]
		# Disable the Base64 encoding
		$nobase64
	)

	# $md5 = new-object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider
	# $hash = [System.BitConverter]::ToString($md5.ComputeHash([System.IO.File]::ReadAllBytes($path)))

	$encoder = "{0}Encoding" -f $encoding

	$algo = "{0}CryptoServiceProvider" -f $algorithm
	$provider = New-Object -TypeName System.Security.Cryptography.$algo
	$engine = New-Object -TypeName System.Text.$encoder

	# Use the ParameterSetName to determine if a string or a path has been specified
	# If it is a path then get the contents
	switch ($PScmdlet.ParameterSetName) {
		"file" {
			$string = Get-Content -Path $path -Raw -Encoding UTF8
			Write-Log -IfDebug -EventId PC_DEBUG_0023 -extra $path
		}
	}

	# Strip characters from the string
	# This is the the UNIX to Windows line ending problem
	# Ruby is UNIX based and will strip LF from files when they are read in
	#$string = $string -replace "`r", ""

	# work out the checksum of the file
	$hash = ([System.BitConverter]::ToString($provider.ComputeHash($engine.GetBytes($string)))).replace("-", "").tolower()

	Write-Log -IfDebug -EventId PC_DEBUG_0024 -extra $hash

	if ($nobase64) {

		$checksum = $hash

	} else {
		# So that the hash is the same as that is generated by chef-client, it needs to be packed
		# and then base64 encoded
		$packed = for($i = 0; $i -lt $hash.length; $i += 2) {

			[char][int]::Parse($hash.substring($i,2), 'HexNumber')
		}

		# Now build up the checksum that is base64 encoded
		$checksum = Get-Base64 -data $packed
	}

	# Return the hash to the calling function
	return $checksum
}
